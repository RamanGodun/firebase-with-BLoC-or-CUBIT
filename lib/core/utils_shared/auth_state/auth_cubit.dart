import 'dart:async';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart' show debugPrint;
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';

part 'auth_state.dart';

/// üîê [AuthCubit] ‚Äî Manages authentication state using Firebase [userStream].
/// ‚úÖ Emits `authenticated` / `unauthenticated` states reactively (SRP)
/// ‚úÖ signOut logic is in separate [SignOutCubit]

final class AuthCubit extends Cubit<AuthState> {
  ///------------------------------------------

  final Stream<User?> userStream;
  late final StreamSubscription<User?> _authSubscription;

  /// üß± Initializes [AuthCubit] with Firebase user stream
  /// üß≠ Listens to auth state changes and emits updates
  AuthCubit({required this.userStream}) : super(AuthState.unknown()) {
    _authSubscription = userStream.listen(_onAuthStateChanged);
  }

  /// üîÅ Handles Firebase user changes ‚Üí updates [AuthState]
  void _onAuthStateChanged(User? user) {
    emit(
      state.copyWith(
        authStatus:
            user != null
                ? AuthStatus.authenticated
                : AuthStatus.unauthenticated,
        user: user,
      ),
    );
  }

  /// üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firebase
  Future<void> reloadUser() async {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) return;

      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firebase
      await currentUser.reload();

      // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
      final updatedUser = FirebaseAuth.instance.currentUser;
      if (updatedUser == null) return;

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
      final updatedState = state.copyWith(
        user: updatedUser, // –∞–±–æ –º–∞–ø–ø—ñ–Ω–≥ —É –≤–∞—à User model
        authStatus:
            updatedUser.emailVerified
                ? AuthStatus.authenticated
                : AuthStatus.unauthenticated,
      );

      emit(updatedState);

      debugPrint(
        'üîÑ User reloaded. Email verified: ${updatedUser.emailVerified}',
      );
    } catch (e) {
      debugPrint('‚ùå Error reloading user: $e');
      // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: emit –ø–æ–º–∏–ª–∫—É
    }
  }

  /// üßº Cancels auth stream subscription on Cubit close
  @override
  Future<void> close() {
    _authSubscription.cancel();
    return super.close();
  }

  //
}
